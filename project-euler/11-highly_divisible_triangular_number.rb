# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number
# to have over five divisors.
#
# What is the value of the first triangle number
# to have over five hundred divisors?
# Solution by Sam Gerber

# This method returns the divisors of a number in an array.
def divisors(number)
  factors = []

  factor = 1
  while factor * factor <= number
    if number % factor == 0
      factors << factor
      factors << number / factor
    end
    factor += 1
  end

  factors.sort.uniq
end

def highly_divisible(divisors)
  number = 1
  triangle_number = 1
  loop do
    break if divisors(triangle_number).count > divisors
    number += 1
    triangle_number += number
  end
  triangle_number
end

a = highly_divisible(500)
puts a
print divisors(a)
